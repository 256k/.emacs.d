#+TITLE: 256k emacs 29.2 config (minimal)
#+AUTHOR: 256k

* CORE SETTINGS AND INSTALLS
** set backups directory
#+begin_src emacs-lisp
  (setq package-enable-at-startup t)
  (setq lexical-binding t)
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup/")))
  (setq backup-by-copying t    ; Don't delink hardlinks
        delete-old-versions t  ; Clean up the backups
        version-control t      ; Use version numbers on backups,
        kept-new-versions 5    ; keep some new versions
        kept-old-versions 2)   ; and some old ones, too
  (setq use-package-always-ensure t)
  (pending-delete-mode 1) ; when a piece of text is marked, typing will delete and replace that selection.
        #+end_src

** setup package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
          ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("melpa" . "https://melpa.org/packages/")))

; Highest number gets priority (what is not mentioned has priority 0)
  (setq package-archive-priorities
        '(("gnu-elpa" . 3)
          ("melpa" . 2)
          ("nongnu" . 1)))
  (package-initialize)
#+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen 1)
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-old-hope t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t) ;; wraps the text in a buffer
#+end_src

** Hide DIRED details
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

** Enabling shorthand block generation
#+begin_src emacs-lisp
  (require 'org-tempo)
  ;; allows the ability to generate #+begin blocks using `<s or q or e...etc
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


* Packages
#+begin_src emacs-lisp

  ;; IMPORTANT: instead of having to set every executable's path in emacs's own custom PATH variable. 
  ;; This will just mimic whatever the shell path that we have contains.
  ;; That way if it works in the shell it should work in emacs (fixes issues with typescript LSP)
  ;; this is for macos apparently
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))

  (use-package git-gutter
    ;; adds markings for file changes
    :ensure t
    :config
    (global-git-gutter-mode +1))

  (use-package magit :ensure t)
  ;; (use-package consult :ensure t)

  (use-package vertico
    :ensure t
    :config
    (vertico-mode))

  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  ;; I've temporarily removed it because it was causing issues when trying to create new file names that matched existing file names
  ;; (use-package orderless
  ;;   :ensure t
  ;;   :custom
  ;;   (completion-styles '(orderless basic))
  ;;   (completion-category-overrides '((file (styles basic partial-completion)))))


  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; Enable auto completion and configure quitting
  (setq corfu-auto t
        corfu-quit-no-match 'separator) ;; or t
  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))


  #+end_src


* set language modes
#+begin_src emacs-lisp
  (use-package uxntal-mode
    :ensure t)
  (setq treesit-font-lock-level 4)
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
#+end_src


* set LSP / UI modes
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (typescript-ts-mode . lsp-deferred))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
  ;; if you are helm user
  ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  ;; (use-package dap-mode)			;
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  ;; (use-package which-key
  ;;   :config
  ;;   (which-key-mode))

#+end_src
