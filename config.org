

#+TITLE: 256k emacs 29.1 config (see no evil)
#+AUTHOR: 256k
#+STARTUP: showeverything
#+OPTIONS: toc:2

* INDEX :toc:
- [[#core-settings-and-installs][CORE SETTINGS AND INSTALLS]]
  - [[#set-backups-directory][set backups directory]]
  - [[#elpaca][ELPACA]]
  - [[#load-evil-mode][Load Evil Mode]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#theme][THEME]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#hide-dired-details][Hide DIRED details]]
  - [[#all-the-icons][ALL THE ICONS]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
- [[#packages][PACKAGES]]
  - [[#magit][MAGIT]]
  - [[#consult][consult]]
  - [[#which-key][WHICH-KEY]]
  - [[#ivy-counsel][IVY (COUNSEL)]]
  - [[#company][COMPANY]]
  - [[#flycheck][FLYCHECK]]
  - [[#treesit-auto][treesit auto]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
  - [[#spacious-padding][spacious-padding]]
  - [[#norns][norns]]
- [[#language-modes][LANGUAGE MODES]]
  - [[#rust][rust]]
  - [[#lua][lua]]
  - [[#typescript][typescript]]
  - [[#zig][zig]]
  - [[#go][go]]

* CORE SETTINGS AND INSTALLS
** set backups directory
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup/")))
  (setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 5    ; keep some new versions
      kept-old-versions 2)   ; and some old ones, too
#+end_src
      
** ELPACA
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
     ;; Install use-package support
   (elpaca elpaca-use-package
     ;; Enable :elpaca use-package keyword.
     (elpaca-use-package-mode)
     ;; Assume :elpaca t unless otherwise specified.
     (setq elpaca-use-package-by-default t))

   ;; Block until current queue processed.
   (elpaca-wait)

   ;;When installing a package which modifies a form used at the top-level
   ;;(e.g. a package which adds a use-package key word),
   ;;use `elpaca-wait' to block until that package has been installed/configured.
   ;;For example:
   ;;(use-package general :demand t)
   ;;(elpaca-wait)

   ;; Expands to: (elpaca evil (use-package evil :demand t))

   ;; (use-package evil
  ;;      :init      ;; tweak evil's configuration before loading it
  ;;      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  ;;      (setq evil-want-keybinding nil)
  ;;      (setq evil-vsplit-window-right t)
  ;;      (setq evil-split-window-below t))
  ;; (add-hook 'prog-mode-hook 'evil-mode)

  ;; ;;  (use-package evil-collection
   ;;     :after evil
   ;;     :config
   ;;     (setq evil-collection-mode-list '(dashboard dired ibuffer))
   ;;     (evil-collection-init))
   ;;   (use-package evil-tutor)

   ;; ;;Turns off elpaca-use-pa
   ;;  ckage-mode current declartion
   ;;Note this will cause the declaration to be interpreted immediately (not deferred).
   ;;Useful for configuring built-in emacs features.
   (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

   ;; Don't install anything. Defer execution of BODY
   ;; (elpaca nil (message "deferred"))
#+end_src


* GRAPHICAL USER INTERFACE TWEAKS

** THEME
#+begin_src emacs-lisp
    (use-package ef-themes
      :config
      (load-theme 'ef-light t))
#+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen 1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t) ;; wraps the text in a buffer
#+end_src

** Hide DIRED details
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src


* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* PACKAGES

** MAGIT
#+begin_src emacs-lisp
  ;; (use-package transient)
  ;;   (use-package magit
  ;;     :after transient)
#+end_src

** consult
#+begin_src emacs-lisp
  (use-package consult)
  ;; consult is kindof like telescope. it is able to list various
  ;; types of things like buffers or files or search words
  ;; using fuzzy finding
  ;; this would be really helpful for better navigation around
  ;; must map a bunch of its functions to commands
#+end_src

** WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.2
	  Which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " â†’ " ))
#+end_src

** IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x C-b" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

** COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
   (use-package company

    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
     (global-company-mode t))
  
  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

# ** DASHBOARD
# Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

# #+begin_src emacs-lisp
#   (use-package dashboard
#     :ensure t 
#     :init
#     (setq initial-buffer-choice 'dashboard-open)
#     (setq dashboard-set-heading-icons t)
#     (setq dashboard-set-file-icons t)
#     (setq dashboard-banner-logo-title "Electronics. music. coding. art.")
#     ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner

#     ;; (setq dashboard-startup-banner "/home/dt/.config/emacs/images/dtmacs-logo.png")  ;; use custom image as banner

#     (setq dashboard-center-content nil) ;; set to 't' for centered content
#     (setq dashboard-items '((recents . 5)
#                             (agenda . 5 )
#                             (bookmarks . 3)
#                             (projects . 3)
#                             (registers . 3)))
#     :custom 
#     (dashboard-modify-heading-icons '((recents . "file-text")
#                                         (bookmarks . "book")))
#     :config
#     (dashboard-setup-startup-hook))

# #+end_src

** FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :diminish
  :init (global-flycheck-mode))

#+end_src

# ** MODELINE
# The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

# #+begin_src emacs-lisp
# (use-package doom-modeline
#   :ensure t
#   :init (doom-modeline-mode 1)
#   :config
#   (setq doom-modeline-height 20      ;; sets modeline height
#         doom-modeline-bar-width 5    ;; sets right bar width
#         doom-modeline-persp-name t   ;; adds perspective name to modeline
#         doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

# #+end_src

# ** NEOTREE
# Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

# | COMMAND        | DESCRIPTION               | KEYBINDING |
# |----------------+---------------------------+------------|
# | neotree-toggle | /Toggle neotree/            | SPC t n    |
# | neotree- dir   | /Open directory in neotree/ | SPC d n    |

# #+BEGIN_SRC emacs-lisp
# (use-package neotree
#   :config
#   (setq neo-smart-open t
#         neo-show-hidden-files t
#         neo-window-width 55
#         neo-window-fixed-size nil
#         inhibit-compacting-font-caches t
#         projectile-switch-project-action 'neotree-projectile-action) 
#         ;; truncate long file names in neotree
#         (add-hook 'neo-after-create-hook
#            #'(lambda (_)
#                (with-current-buffer (get-buffer neo-buffer-name)
#                  (setq truncate-lines t)
#                  (setq word-wrap nil)
#                  (make-local-variable 'auto-hscroll-mode)
#                  (setq auto-hscroll-mode nil)))))

# #+end_src

# ** PROJECTILE
# [[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs.  I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

# #+begin_src emacs-lisp
# (use-package projectile
#   :config
#   (projectile-mode 1))
# #+end_src

** treesit auto
automatically manage the treesitter languages
#+begin_src emacs-lisp
  (setq treesit-font-lock-level 4)
  (use-package treesit-auto
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src
** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.4))))
#+end_src

** spacious-padding
#+begin_src emacs-lisp
  (use-package spacious-padding
    :config
    (setq spacious-padding-widths
          '(:internal-border-width 60 :right-divider-width 30 :scroll-bar-width 8))
          (spacious-padding-mode 1))
#+end_src

** norns
#+begin_src emacs-lisp
  (use-package norns
    :bind (
         ("C-c e b" . norns-load-current-script)
         ("C-c e s" . norns-send-selection)
         ("C-c e r" . norns-rerun)
         ("C-." . norns-sc-stop))

    :config
    (add-hook 'lua-mode-hook #'norns-mode-maybe-activate)
    (add-hook 'sclang-mode-mode-hook #'norns-mode-maybe-activate))
#+end_src

* LANGUAGE MODES

** rust
#+begin_src emacs-lisp
(use-package rust-mode
  :interpreter ("rust" . rust-mode))
#+end_src

** lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :interpreter ("lua" . lua-mode)
    :custom
    (lua-indent-level 2))
#+end_src

** typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :interpreter ("ts" . typescript-mode))
#+end_src

** zig
#+begin_src emacs-lisp
(use-package zig-mode)
#+end_src

** go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t

    :config
    (add-to-list 'exec-path "/Users/fayekhelmi/go/bin")
    (setenv "PATH" (concat (getenv "PATH") ":/Users/fayekhelmi/go/bin")))
#+end_src
